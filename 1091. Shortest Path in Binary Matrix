class Solution {
public:
    int d[8][2] = {{-1, 0},{-1, 1},{-1, -1},
                   {1, 0}, {1, 1}, {1, -1},
                   {0, -1}, {0, 1}
                  };
    
    int shortestPathBinaryMatrix(vector<vector<int>>& grid)
    {
        int n=grid.size();
        if(grid[n-1][n-1]==1 || grid[0][0]==1)
            return -1;
        
        queue<pair<int,int>> q;
        q.push({0,0});
        grid[0][0]=1;
        
        int res=0;
        while(!q.empty())
        {
            int len=q.size();
            res++;
            
            for(int i=0;i<len;i++)
            {
                pair<int,int> p=q.front();
                q.pop();
                int x=p.first;
                int y=p.second;
                if(x==n-1 && y==n-1)
                    return res;
                
                for(int j=0;j<8;j++)
                {
                    int r=x+d[j][0];
                    int c=y+d[j][1];
                    if(r<0 || c<0 || r>=n || c>=n || grid[r][c]==1)
                        continue;
                    
                    grid[r][c]=1;
                    q.push({r,c});
                }
            }          
        }
        return -1;
    }
};

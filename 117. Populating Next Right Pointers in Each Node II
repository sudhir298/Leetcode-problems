/////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
/////////RECURSIVE APPROACH////////////////////////////
//////////////////////////////////////////////////////
class Solution {
public:
    Node* nextLeft;
	bool hasToTheEnd;
    void scanlevel(Node* node, int level)
	{
		if (level == 1)
		{
			if (nextLeft)
				nextLeft->next = node;
            
			nextLeft = node;

			if (node->left || node->right)
				hasToTheEnd= false;
		}

		if (node->left)	  
            scanlevel(node->left, level - 1);
		if (node->right) 
            scanlevel(node->right, level - 1);
	}
    
    Node* connect(Node* root) 
    {
        if (!root)
            return NULL;

		hasToTheEnd = false;
		int level = 1;
		while (!hasToTheEnd)
		{
			hasToTheEnd= true;
			nextLeft= NULL;
			scanlevel(root, level);
			++level;
		}
        return root;
    }
};


/////////////////////////////////////////////////////
//////////////////ITERATIVE APPROACH////////////////
///////////////////////////////////////////////////
class Solution {
public:
    Node* connect(Node* root) 
    {
        if(!root)
            return NULL;
        
        Node* head=root;
        while(head)
        {
            Node* dummy=new Node(0);
            Node* temp=dummy;
            
            while(head)
            {
                if(head->left!=NULL)
                {
                    temp->next=head->left;
                    temp=temp->next;
                }
                if(head->right!=NULL)
                {
                    temp->next=head->right;
                    temp=temp->next;
                }
                head=head->next;
            }
            head=dummy->next;
        }
        return root;
    }
};



/////////////////////////////////////////////////////
////////////////USING QUEUE/////////////////////////
///////////////////////////////////////////////////
class Solution {
public:
    Node* connect(Node* root) 
    {
        if(!root)
            return NULL;
        
        queue<Node*> q;
        q.push(root);
        
        while(!q.empty())
        {
            int n=q.size();
            Node* dummy=new Node(0);
            
            while(n-- > 0)
            {
                Node* node=q.front();
                q.pop();
                dummy->next=node;
                dummy=dummy->next;
                
                if(node->left)
                    q.push(node->left);
                
                if(node->right)
                    q.push(node->right);
            }
        }
        return root;
    }
};

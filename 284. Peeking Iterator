class PeekingIterator : public Iterator {
public:
    bool hasPeeked;
    int peekElement;
	PeekingIterator(const vector<int>& nums) : Iterator(nums)
    {
        
        peekElement = 0;
        hasPeeked = false;
        
	    // Initialize any member here.
	    // **DO NOT** save a copy of nums and manipulate it directly.
	    // You should only use the Iterator interface methods.
	    
	}
	
    // Returns the next element in the iteration without advancing the iterator.
	int peek() 
    {
        if (!hasPeeked) 
        {
            peekElement = Iterator::next();
            hasPeeked = true;
        }
        return peekElement;
	}
	
	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	int next() 
    {
	    if (hasPeeked) 
        {
            hasPeeked = false;
            return peekElement;
        }
        return Iterator::next();
	}
	
	bool hasNext() const 
    {
	    if (hasPeeked) 
            return true;
        return Iterator::hasNext();
	}
};

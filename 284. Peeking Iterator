class PeekingIterator : public Iterator {
public:
    int next_num;
    bool num_has_next;
	PeekingIterator(const vector<int>& nums) : Iterator(nums) {
        
        num_has_next = Iterator::hasNext();

        if (num_has_next)
            next_num = Iterator::next();
        
	    // Initialize any member here.
	    // **DO NOT** save a copy of nums and manipulate it directly.
	    // You should only use the Iterator interface methods.
	    
	}
	
    // Returns the next element in the iteration without advancing the iterator.
	int peek() {
        return next_num;
	}
	
	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	int next() {
	    int curr_next = next_num;
        num_has_next = Iterator::hasNext();

        if (num_has_next) 
            next_num = Iterator::next();

        return curr_next;   
	}
	
	bool hasNext() const {
	    return num_has_next;
	}
};

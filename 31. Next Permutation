class Solution {
public:
    void nextPermutation(vector<int>& nums)
    {
        if(nums.size()==1)
            return;
        
        bool flag=false;
        int n=nums.size();
        priority_queue<pair<int,int>> pq;
        
        for(int i=n-2;i>=0;i--)
        {
            if(i<n-2)
                pq.push({nums[i+2],i+2});
            
            if(nums[i]<nums[i+1])
            {
                if(!pq.empty() && pq.top().first>nums[i])
                {
                    priority_queue<pair<int,int>> p;
                    pq.push(pq.top());
                    int x=pq.top().first;
                    int y=pq.top().second;
                    pq.pop();
                    while(!pq.empty() &&  pq.top().first >nums[i])
                    {
                        p.push(pq.top());
                        x=pq.top().first;
                        y=pq.top().second;
                        pq.pop();
                    }
                    while(!p.empty())
                    {
                        pq.push(p.top());
                        p.pop();
                    }
                    int temp=nums[i];
                    nums[i]=x;
                    nums[y]=temp;
                    sort(nums.begin()+i+1,nums.end());
                    flag=true;
                    break;
                }
                int temp=nums[i];
                nums[i]=nums[i+1];
                nums[i+1]=temp;
                sort(nums.begin()+i+1,nums.end());
                flag=true;
                break;
            }
        }
        
        if(!flag)
        {
            for(int i=0;i<nums.size()/2;i++)
            {
                int temp=nums[i];
                nums[i]=nums[nums.size()-i-1];
                nums[nums.size()-i-1]=temp;
            }
        }
    }
};

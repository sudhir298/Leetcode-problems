class Solution {
public:
    int lip(int i,int j,vector<vector<int>>& v,vector<vector<int>>& mat)
    {
        if(i<0 || j<0 || i>=mat.size() || j>=mat[0].size())
            return 0;
        
        if(v[i][j]>0)
            return v[i][j];
        
        int cur=1;
        if(i+1<mat.size() && mat[i+1][j]>mat[i][j])
            cur=max(cur,1+lip(i+1,j,v,mat));
        
        if(j+1<mat[0].size() && mat[i][j+1]>mat[i][j])
            cur=max(cur,1+lip(i,j+1,v,mat));
        
        if(j-1>=0 && mat[i][j-1]>mat[i][j])
            cur=max(cur,1+lip(i,j-1,v,mat));
        
        if(i-1>=0 && mat[i-1][j]>mat[i][j])
            cur=max(cur,1+lip(i-1,j,v,mat));
        
        v[i][j]=cur;
        return cur;
    }
    
    int longestIncreasingPath(vector<vector<int>>& matrix)
    {
        int m=matrix.size();
        int n=matrix[0].size();
        
        int res=0;
        vector<vector<int>> v(m,vector<int>(n,0));
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                res=max(res,lip(i,j,v,matrix));
        
        return res;
    }
};

//EFFICIENT SOLUTION
class Solution {
public:
    
    void solve(int col, vector<string> &board, vector<vector<string>> &res, vector<int> &leftrow, vector<int> &updiag, vector<int> &downdiag, int n) 
    {
        if(col == n) 
        {
            res.push_back(board); 
            return; 
        }
    
        
        for(int row = 0;row<n;row++)
        {
            if(leftrow[row]==0 && downdiag[row + col]==0 && updiag[n-1+col-row]==0) 
            {
                board[row][col] = 'Q'; 
                leftrow[row] = 1; 
                downdiag[row+col] = 1; 
                updiag[n-1 + col - row] = 1;
                solve(col+1, board, res, leftrow, updiag, downdiag, n); 
                board[row][col] = '.'; 
                leftrow[row] = 0; 
                downdiag[row+col] = 0; 
                updiag[n-1 + col - row] = 0;
            }
        }
    }
    
    vector<vector<string>> solveNQueens(int n) 
    {
        vector<vector<string>> ans; 
        vector<string> board(n);
        string s(n, '.'); 
        for(int i = 0;i<n;i++) 
            board[i] = s; 
        
        vector<int> leftrow(n, 0);
        vector<int> updiag(2*n-1, 0);
        vector<int> downdiag(2*n-1, 0); 
        solve(0,board, ans, leftrow, updiag, downdiag, n); 
        return ans; 
    }
};










                                                          /*BRUTE FORCE SOLUTION */
                                                          /*BRUTE FORCE SOLUTION */
                                                          /*BRUTE FORCE SOLUTION */
                                                          /*BRUTE FORCE SOLUTION */

class Solution {
public:
    bool check(int row, int col, vector<string> board, int n) 
    {
        int duprow = row;
        int dupcol = col;         
        while(row >= 0 && col >= 0)
        {
            if(board[row][col] == 'Q') 
                return false;
            row--;
            col--;
        }        
        
        col = dupcol; 
        row = duprow;
        while(row<n && col>=0) 
        {
            if(board[row][col] == 'Q') 
                return false;
            row++;
            col--; 
        }
    
        row = duprow;
        col = dupcol;         
        while(col>=0) 
        {
            if(board[row][col] == 'Q')
                return false;
            col--; 
        }
        
        return true; 
    }
    
    void solve(int col, vector<string> &board, vector<vector<string>> &ans, int n)
    {
        if(col == n) 
        {
            ans.push_back(board); 
            return; 
        }
    
        for(int row = 0;row<n;row++)
        {
            if(check(row, col, board, n))
            {
                board[row][col] = 'Q'; 
                solve(col+1, board, ans, n); 
                board[row][col] = '.'; 
            }
        }
    }
    
    vector<vector<string>> solveNQueens(int n) 
    {
        vector<vector<string>> res;
        vector<string> v(n);
        string s(n,'.');
        for(int i=0;i<n;i++)
            v[i]=s;
        
        solve(0,v,res,n);
        return res;
    }
};

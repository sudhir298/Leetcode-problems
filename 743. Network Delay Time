class Solution {
    struct node{
        int dest;
        int wt;
    };
    struct qnode{
        int vertex;
        int dist;
    };
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) 
    {
        map<int,vector<node*>> mp;
        for(int i=0;i<times.size();i++)
        {
            node* temp=new node;
            temp->dest=times[i][1];
            temp->wt=times[i][2];
            mp[times[i][0]].push_back(temp);
        }
        
        qnode* qn=new qnode;
        qn->vertex=k;
        qn->dist=0;
        queue<qnode*> q;
        q.push(qn);
        
        vector<int> v(n+1,INT_MAX);
        v[k]=0;
        
        while(!q.empty())
        {
            qnode* cur=q.front();
            q.pop();
            
            for(auto i: mp[cur->vertex])
            {
                qnode* temp=new qnode;
                temp->vertex=i->dest;
                temp->dist=i->wt + cur->dist;
                
                if(v[i->dest] > temp->dist)
                {
                    q.push(temp);
                    v[i->dest]=temp->dist;
                }
            }
        }
        int res=0;
        for(int i=1;i<=n;i++)
        {
            if(v[i]==INT_MAX)
                return -1;
            res=max(res,v[i]);
        }
        return res;
    }
};

---------------------------O(n) SPACE COMPLEXITY-----------------

class Solution {
public:
    bool backspaceCompare(string s, string t) 
    {
        stack<char> st;
        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='#')
            {
                if(!st.empty())
                    st.pop();
            }
            else
                st.push(s[i]);
        }
        
        stack<char> xy;
        for(int i=0;i<t.size();i++)
        {
            if(t[i]=='#')
            {
                if(!xy.empty())
                    xy.pop();
            }
            else
                xy.push(t[i]);
        }
        
        if(st.size()!=xy.size())
            return false;
        
        while(!xy.empty())
        {
            if(xy.top()!=st.top())
                return false;
            else
            {
                xy.pop();
                st.pop();
            }
        }
        return true;
    }
};



----------------------------------------------------------------------------
----------------------------------------------------------------------------
-------------------O(1) SPACE COMPLEXITY------------------------------------

class Solution {
public:
    bool backspaceCompare(string s, string t) 
    {
        int i=s.size()-1;
        int j=t.size()-1;
        
        int count1 = 0;
        int count2 = 0;

        while (i >= 0 || j >= 0)
        { 
            while (i >= 0)
            {
                if (s[i] == '#')
                {
                    count1++;
                    i--;
                }
                else if (count1 > 0) 
                {
                    count1--;
                    i--;
                }
                else break;
            }
            
            while (j >= 0) 
            {
                if (t[j] == '#')
                {
                    count2++;
                    j--;
                }
                else if (count2 > 0)
                {
                    count2--;
                    j--;
                }
                else 
                    break;
            }
            
            if (i >= 0 && j >= 0 && s[i]!= t[j])
                return false;
            
            if ((i >= 0) != (j >= 0))
                return false;
            i--; 
            j--;
        }
        return true;
    }
};

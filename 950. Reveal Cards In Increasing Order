class Solution {
public:
    vector<int> deckRevealedIncreasing(vector<int>& deck)
    {
        sort(deck.begin(),deck.end());
        vector<int> res;
        int i=deck.size()-1;
        while(i>=0)
        {
            if(res.size()!=0)
            {
                int x=res.back();
                res.pop_back();
                res.insert(res.begin(),x);
            }
            res.insert(res.begin(),deck[i--]);
        }
        return res;
    }
};




/////////////////////////////////////////////////////////////
///////////////EFFICIENT SOLUTION///////////////////////////
///////////////////////////////////////////////////////////

class Solution {
public:
    vector<int> deckRevealedIncreasing(vector<int>& deck)
    {
        sort(deck.begin(),deck.end());
        
        deque<int> dq;
        for(int i=0;i<deck.size();i++)
            dq.push_back(i);
        
        vector<int> res(deck.size());
        bool flag=true;
        int i=0;
        while(!dq.empty())
        {
            if(flag)
            {
                res[dq.front()]=deck[i++];
                dq.pop_front();
            }
            else
            {
                dq.push_back(dq.front());
                dq.pop_front();
            }
            flag=!flag;
        }
        return res;
    }
};
